#!/usr/bin/env node

/**
 * Module dependencies.
 */

require("dotenv").config();

const express = require("express");
const { graphqlHTTP } = require("express-graphql");

const { PubSub, makeExecutableSchema } = require("apollo-server");

const mongoose = require("mongoose");

const typeDefs = require("../graphql/typeDefs");

const resolvers = require("../graphql/resolvers");

const pubsub = new PubSub();

const cors = require(`cors`);

const PORT = process.env.PORT || 4000;

var env = process.env.NODE_ENV || "development";

var debug = require("debug")("sandbox-nodejs:server");
var http = require("http");

const app = express();

app.use(
  cors({
    origin:
      env == "development"
        ? ["http://localhost:3000"]
        : ["https://attendlytical.netlify.app"],
    credentials: true,
  })
);

app.use(
  "/graphql",
  graphqlHTTP({
    schema: makeExecutableSchema({ typeDefs, resolvers }),
    context: ({ req }) => ({ req, pubsub }),
    graphiql: true,
  })
);

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(PORT || "4000");
app.set("port", port);

mongoose
  .connect(process.env.MONGO_URI, {
    useCreateIndex: true,
    useFindAndModify: false,
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => {
    console.log("MongoDB Connected");

    /**
     * Create HTTP server.
     */

    var server = http.createServer(app);

    /**
     * Event listener for HTTP server "error" event.
     */

    function onError(error) {
      if (error.syscall !== "listen") {
        throw error;
      }

      var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

      // handle specific listen errors with friendly messages
      switch (error.code) {
        case "EACCES":
          console.error(bind + " requires elevated privileges");
          process.exit(1);
          break;
        case "EADDRINUSE":
          console.error(bind + " is already in use");
          process.exit(1);
          break;
        default:
          throw error;
      }
    }

    /**
     * Event listener for HTTP server "listening" event.
     */

    function onListening() {
      var addr = server.address();
      var bind =
        typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
      debug("Listening on " + bind);
    }

    server.on("error", onError);
    server.on("listening", onListening);

    return server.listen(port);
  })
  .then((res) => {
    console.log(`Server running at port: ${JSON.stringify(res.address()?.port)}`);
  })
  .catch((err) => {
    console.error(err);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}
